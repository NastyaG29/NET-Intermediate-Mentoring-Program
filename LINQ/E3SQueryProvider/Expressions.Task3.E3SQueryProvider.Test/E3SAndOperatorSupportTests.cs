/*
 * This task is a bit harder than the previous two.
 * Feel free to change the E3SLinqProvider and any other classes if needed.
 * Possibly, after these changes you will need to rewrite existing tests to make them work again =).
 *
 * The task: implement support of && operator for IQueryable. The final request generated by FTSRequestGenerator, should
 * imply the following rules: https://kb.epam.com/display/EPME3SDEV/Telescope+public+REST+for+data#TelescopepublicRESTfordata-FTSRequestSyntax
 */

using System;
using System.Linq;
using System.Net.Http;
using Expressions.Task3.E3SQueryProvider.Helpers;
using Expressions.Task3.E3SQueryProvider.Models.Entities;
using Expressions.Task3.E3SQueryProvider.QueryProvider;
using Expressions.Task3.E3SQueryProvider.Services;
using Microsoft.Extensions.Configuration;
using Xunit;

namespace Expressions.Task3.E3SQueryProvider.Test
{
    public class E3SAndOperatorSupportTests
    {
        private static readonly IConfigurationRoot Configuration = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
        private static readonly string User = Configuration["api:user"];
        private static readonly string Password = Configuration["api:password"];
        private static readonly string BaseUrl = Configuration["api:apiBaseUrl"];

        private static readonly Lazy<E3SSearchService> SearchService = new Lazy<E3SSearchService>(() =>
        {
            HttpClient httpClient = HttpClientHelper.CreateClient(User, Password);
            return new E3SSearchService(httpClient, BaseUrl);
        });

        #region SubTask 3: AND operator support

        [Fact]
        public void TestAndQueryable()
        {
            var employees = new E3SEntitySet<EmployeeEntity>(SearchService.Value);
            var filteredEmployees = employees.Where(e => e.Workstation.Contains("EPBYMINW") && e.Manager.StartsWith("Makhsut"));

            Assert.True(filteredEmployees.Any());
        }

        #endregion
    }
}